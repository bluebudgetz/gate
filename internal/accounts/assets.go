// Package accounts Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// mongodb-balance-query.json
package accounts

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mongodbBalanceQueryJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\xc1\x6a\xe3\x30\x10\xbd\xfb\x2b\x84\xf1\xd1\x84\xec\xd5\xd7\x85\x40\x60\x8f\x81\x3d\x84\xb0\x4c\x64\xad\xad\xd6\xd6\xb8\xf2\x18\x02\xc5\xff\x5e\xe4\xc4\x96\x64\xcb\x21\xa5\x85\xf6\xd0\x9b\xfd\x66\xfc\xde\x9b\xc9\x53\x74\x8c\x18\x7b\x8d\x18\x63\x2c\x4e\x0a\x0d\x4d\xf9\x07\xf1\xb9\x6b\xe2\xec\x86\x32\x16\xff\xd7\x58\xc7\x19\x8b\x81\x73\xec\x14\xb5\x71\x3a\x56\x5a\x02\x4d\x7f\x25\x95\xa6\x9c\xfc\x93\xb9\x2d\x71\x54\x4a\x70\xda\x69\xac\x77\x52\x54\xb9\xe9\x08\x35\x1c\x70\x2a\x37\xa0\x85\xa2\xbd\xd3\x03\xad\xc1\x79\x29\xab\x5c\x0b\x15\x0f\x70\x1f\x31\xd6\xa7\x8e\xeb\x46\xe3\x93\xe0\xe4\x3a\x36\x42\x19\xfb\x35\xf1\x28\xa8\x85\x07\x4c\x52\x2e\x38\xea\xec\xf3\x41\x36\x19\xdf\x37\x86\x2e\xac\x5d\xad\x2e\x8b\x34\xa8\x16\x38\x49\x54\xce\xc2\x2a\xe1\xfa\x64\xd3\x4e\x7f\xaf\x48\x9b\xf7\x74\xd1\x3d\xf8\xbe\xee\xfb\x56\xeb\xed\x64\xb2\x11\x95\x54\x66\xdc\xe3\xf4\xa1\x15\x34\xa6\x6b\x20\x5e\x7a\x36\xae\xb8\xb8\x34\x7a\x01\x9b\x02\x6a\x8f\x2d\xc4\xea\xb0\xbc\x04\x9b\xaf\xc5\x16\x3b\xcd\x85\x33\x92\x5f\x4e\xec\x80\x81\x8e\xd3\x02\xeb\x97\x44\x61\x53\x52\x7d\xdc\x94\xfb\x1b\x3d\xe6\x2e\xba\xd7\xe1\x56\xed\xf3\xf8\x74\x9a\x9d\x01\xec\xa8\x40\xa9\x8a\xc3\xe5\x27\x89\x9f\x92\x44\x02\x5d\x08\xfa\x66\x49\x7c\xd0\xd4\x97\x26\x51\x2a\x8e\xf5\xbd\x24\x42\x9e\x0f\x7f\xe9\xad\x1b\xc6\xf1\x2b\x3f\x73\x49\xdb\x0d\x11\x4d\x2c\xe9\x06\x6a\x33\xe2\x32\x4e\xe3\x09\x58\x61\xb0\x07\x64\xce\xf0\x0e\x97\x67\xa8\x40\x71\xb1\x90\x38\x93\x86\xe1\x86\x39\x7a\xf1\x9d\x86\x4a\x3d\x78\x72\x1a\xcd\xf7\xbd\xe2\x25\x70\x83\x39\x5b\xce\xd8\x76\xb1\x84\x19\xec\xdf\x5c\x5b\xab\x12\x9d\xde\x02\x00\x00\xff\xff\xf2\x90\x41\x43\xe0\x07\x00\x00")

func mongodbBalanceQueryJsonBytes() ([]byte, error) {
	return bindataRead(
		_mongodbBalanceQueryJson,
		"mongodb-balance-query.json",
	)
}

func mongodbBalanceQueryJson() (*asset, error) {
	bytes, err := mongodbBalanceQueryJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mongodb-balance-query.json", size: 2016, mode: os.FileMode(420), modTime: time.Unix(1561492417, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mongodb-balance-query.json": mongodbBalanceQueryJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mongodb-balance-query.json": &bintree{mongodbBalanceQueryJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
