// Package assets Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// assets/rdbms/init.sql
// deployments/rdbms/migrations/01_create_tables.down.sql
// deployments/rdbms/migrations/01_create_tables.up.sql
// deployments/rdbms/schema.sql
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsRdbmsInitSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8d\x41\xab\x9b\x40\x14\x85\xf7\xfe\x8a\xc3\xdb\x38\x13\x86\xf7\x88\x7d\xaf\x9b\xae\x6c\xb5\x44\x10\x05\x35\x29\x5d\x85\x1b\xe7\xb6\x0e\x99\x8c\xa2\x93\x40\xfe\x7d\x31\x21\x25\xb4\x5b\xef\xe2\xf2\xdd\x0b\xe7\x3b\x6f\xab\x00\x2b\x34\x9d\x99\xf0\xcb\x58\x86\x99\xd0\x92\xb5\xac\x71\xb8\xe2\xe5\x37\x79\x7e\x81\xef\x41\x5a\xc3\x38\xe3\x0d\x59\x68\xf2\x34\xff\x7c\xc7\x37\x3e\xd0\xc4\xaf\x01\x6e\xa2\xcc\x23\xab\x51\x16\xf9\x4f\x18\x77\xe9\x8f\x3c\xc7\xa0\xf9\xc2\xb6\x1f\x4e\xec\x3c\xd8\x5d\xcc\xd8\xbb\x99\xe7\xd0\x5b\x90\x15\x75\x5a\x35\xc8\x8a\xa6\x04\xb5\x6d\x7f\x76\x7e\x82\x30\x5a\xa1\x1d\x99\x3c\xeb\x7d\xef\x14\xce\x83\xfe\xcb\x9a\x2d\x3f\xd8\xd1\x89\x15\x06\x1a\xd9\xf9\xbd\xd1\x32\xd8\xc5\xf9\x36\xad\x21\xd6\x0a\x49\xdc\xa4\xfb\x38\x49\xc4\x0c\xa2\x28\x7f\x08\x29\xd5\x5c\x94\x56\xbb\x38\xc7\xf7\xbc\x2c\x2b\x51\xc5\x45\x22\x24\x56\x88\xde\x25\x36\xe5\xb6\x92\x0a\xc5\x36\xcf\x1f\x3b\xfc\x4a\xee\xb8\x0e\xef\xa7\x54\x01\xee\x23\xa2\x25\xfd\xd1\xff\xfe\x4f\x4b\xf9\xf3\x9e\xdc\x14\x2a\xac\x9f\xe4\xef\x4b\xc9\x6b\xb2\x34\x5e\xff\xb1\x7f\x2c\x65\xcf\xdc\x74\x1e\xc9\xb5\x1c\x2a\x44\x4f\x05\x9f\x97\x2a\xf8\xd6\x31\x0d\xb1\xd3\x1b\x26\xeb\xbb\x2b\x32\xd7\xbe\x86\x0a\x1f\xf2\x4b\xf0\x27\x00\x00\xff\xff\xc2\x67\x4d\x35\x19\x03\x00\x00")

func assetsRdbmsInitSqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRdbmsInitSql,
		"assets/rdbms/init.sql",
	)
}

func assetsRdbmsInitSql() (*asset, error) {
	bytes, err := assetsRdbmsInitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/rdbms/init.sql", size: 793, mode: os.FileMode(420), modTime: time.Unix(1555675806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentsRdbmsMigrations01_create_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x29\x4a\xcc\x2b\x4e\x4c\x2e\xc9\xcc\xcf\x2b\xb6\xe6\xc2\xaa\x24\x31\x39\x39\xbf\x34\xaf\xa4\xd8\x9a\x0b\x10\x00\x00\xff\xff\xa4\x3c\x65\xad\x42\x00\x00\x00")

func deploymentsRdbmsMigrations01_create_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsRdbmsMigrations01_create_tablesDownSql,
		"deployments/rdbms/migrations/01_create_tables.down.sql",
	)
}

func deploymentsRdbmsMigrations01_create_tablesDownSql() (*asset, error) {
	bytes, err := deploymentsRdbmsMigrations01_create_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/rdbms/migrations/01_create_tables.down.sql", size: 66, mode: os.FileMode(420), modTime: time.Unix(1555667022, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentsRdbmsMigrations01_create_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x41\x4f\x83\x40\x10\x85\xef\xfc\x8a\x39\x42\xe2\xc9\xa4\x27\x4f\x2b\x0c\x95\x08\x4b\x33\x2c\x26\x3d\x91\x0d\xac\x0d\xd1\x2e\x0d\xdd\xfe\x7f\xb3\x52\x28\x08\x8d\xd5\x28\x27\xb2\xf3\x66\xf2\xe6\x7b\xe3\x13\x32\x81\x20\xd8\x63\x8c\x20\xcb\xb2\x39\x69\x73\x74\x5c\x07\x00\xa0\xae\xa0\xff\x22\x2e\x20\xe7\x59\xb4\xe6\x18\x00\x4f\x05\xf0\x3c\x8e\x81\xe5\x22\x2d\x22\xee\x13\x26\xc8\x05\x6c\x28\x4a\x18\x6d\xe1\x19\xb7\x77\x9f\x03\xca\x56\x49\xa3\xaa\xa2\xd1\x20\xa2\x04\x33\xc1\x92\x8d\x7d\x1f\x06\x04\x18\xb2\x3c\x16\xe0\xe7\x44\xc8\x45\x31\xa8\xba\xfe\xd3\xa1\x5a\xee\xb7\xbd\x29\x87\x7c\x13\x58\xf3\x57\xba\x2b\xf5\xae\xae\x75\x77\x0a\x2d\xf7\xea\xbc\xe0\x0b\x23\xff\x89\x91\x7b\xbf\x5a\x79\x83\xbf\x4e\x75\x90\xad\xd2\xa6\xb0\x34\xa6\x18\x06\x85\x9f\xf2\x4c\x10\xb3\xd5\x30\x25\x8c\xd6\xdc\x32\x80\xd7\xb7\xa2\x27\x5a\x5c\x86\xb8\xc3\xaf\x07\x84\x21\x12\x72\x1f\xb3\x81\x3d\xb8\x75\xe5\x39\x3d\xf7\xcb\x92\x84\x99\xa0\xc8\x17\xe3\x52\x80\x31\x8e\x4b\xde\x83\x33\xc9\xd3\xb4\x52\x1f\x65\x69\xea\x46\x2f\x64\xba\x14\x2d\xfc\x2a\xdc\xf3\x37\xa1\x7c\x7b\xca\x4d\x5b\xef\x6a\x3d\xb6\x34\x09\x03\xbe\xc4\x71\x6c\x4e\x6d\xa9\x7a\xb2\x96\xe8\x95\x0d\x3a\xb9\x91\xed\x4e\x99\x9b\xe5\x72\x6f\x65\x63\x33\x61\x9c\xb2\x85\xe3\xff\x2e\xf9\x31\xfb\x62\xee\xd9\x9d\x3d\xfd\xf5\x35\xfc\xc8\xe0\x9c\x92\x3b\x7b\xfa\x8f\x73\xfd\x08\x00\x00\xff\xff\x19\xfd\xaf\x51\x7f\x04\x00\x00")

func deploymentsRdbmsMigrations01_create_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsRdbmsMigrations01_create_tablesUpSql,
		"deployments/rdbms/migrations/01_create_tables.up.sql",
	)
}

func deploymentsRdbmsMigrations01_create_tablesUpSql() (*asset, error) {
	bytes, err := deploymentsRdbmsMigrations01_create_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/rdbms/migrations/01_create_tables.up.sql", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1555605033, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentsRdbmsSchemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8c\xc1\x6a\x83\x40\x14\x45\xf7\x7e\xc5\x25\x50\x04\xa1\x66\xd3\x45\x21\x9b\x4e\xf4\xa5\x15\x06\x2d\xe3\xeb\xa2\xab\x32\x4f\x5f\x88\x54\x6b\x71\xc6\x42\xfe\xbe\x98\x76\x79\x2f\xe7\x9c\x7d\x96\x20\x03\x5f\x86\x80\xf3\x30\x2a\x86\x80\xce\x8f\xa3\xf6\x90\x2b\x76\xfd\xdc\x7d\xea\x72\xdf\xcd\xd3\xf7\x1c\x34\xbf\x4e\xe3\x0e\x71\x46\xb7\xa8\x8f\x8a\x78\x51\xf4\x3e\x7a\xf1\x41\xf3\x04\xb7\x52\x15\x51\xb5\xa8\x1b\xc6\x1a\xfe\x22\x1b\xe5\xbb\xb8\xfa\x11\x41\x97\x1f\x5d\xc2\xc6\xee\x93\xc2\x91\x61\x42\xe3\xe0\xe8\xd5\x9a\x82\x50\x1a\x36\x47\xd3\x12\x44\x50\xd2\xc9\xbc\x59\x46\xf1\x62\x9c\x29\x98\x1c\x5a\x62\xac\xf1\xfc\x38\xc9\x03\x8a\xc6\xda\x4d\xfe\xdf\x1f\x32\x7c\x1d\x92\x67\x67\x6a\x86\xb1\x16\x4d\x0d\x91\x3c\x03\x37\x48\x45\xd2\xa7\xf4\x2e\x45\x55\x52\xcd\xd5\xa9\xa2\x12\xc7\xf7\xdb\x7d\x48\x7e\x03\x00\x00\xff\xff\xf3\x42\x1b\x54\xfd\x00\x00\x00")

func deploymentsRdbmsSchemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsRdbmsSchemaSql,
		"deployments/rdbms/schema.sql",
	)
}

func deploymentsRdbmsSchemaSql() (*asset, error) {
	bytes, err := deploymentsRdbmsSchemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/rdbms/schema.sql", size: 253, mode: os.FileMode(420), modTime: time.Unix(1555666955, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/rdbms/init.sql":                                  assetsRdbmsInitSql,
	"deployments/rdbms/migrations/01_create_tables.down.sql": deploymentsRdbmsMigrations01_create_tablesDownSql,
	"deployments/rdbms/migrations/01_create_tables.up.sql":   deploymentsRdbmsMigrations01_create_tablesUpSql,
	"deployments/rdbms/schema.sql":                           deploymentsRdbmsSchemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"rdbms": &bintree{nil, map[string]*bintree{
			"init.sql": &bintree{assetsRdbmsInitSql, map[string]*bintree{}},
		}},
	}},
	"deployments": &bintree{nil, map[string]*bintree{
		"rdbms": &bintree{nil, map[string]*bintree{
			"migrations": &bintree{nil, map[string]*bintree{
				"01_create_tables.down.sql": &bintree{deploymentsRdbmsMigrations01_create_tablesDownSql, map[string]*bintree{}},
				"01_create_tables.up.sql":   &bintree{deploymentsRdbmsMigrations01_create_tablesUpSql, map[string]*bintree{}},
			}},
			"schema.sql": &bintree{deploymentsRdbmsSchemaSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
