// Package assets Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// deployments/rdbms/migrations/01_create_tables.down.sql
// deployments/rdbms/migrations/01_create_tables.up.sql
// deployments/rdbms/schema.sql
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deploymentsRdbmsMigrations01_create_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x29\x4a\xcc\x2b\x4e\x4c\x2e\xc9\xcc\xcf\x2b\xb6\xe6\xc2\xaa\x24\x31\x39\x39\xbf\x34\xaf\xa4\xd8\x9a\x0b\x10\x00\x00\xff\xff\xa4\x3c\x65\xad\x42\x00\x00\x00")

func deploymentsRdbmsMigrations01_create_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsRdbmsMigrations01_create_tablesDownSql,
		"deployments/rdbms/migrations/01_create_tables.down.sql",
	)
}

func deploymentsRdbmsMigrations01_create_tablesDownSql() (*asset, error) {
	bytes, err := deploymentsRdbmsMigrations01_create_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/rdbms/migrations/01_create_tables.down.sql", size: 66, mode: os.FileMode(420), modTime: time.Unix(1555667022, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentsRdbmsMigrations01_create_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x31\xef\x9b\x30\x10\xc5\x77\x3e\xc5\x8d\x20\x75\xa8\x2a\x65\xca\xe4\xc2\x91\xa2\x82\x89\xcc\x51\x35\x13\x72\xc0\x8d\x50\x83\x89\x08\xf9\xfe\x95\x43\x20\x10\x82\xda\x44\xfd\x7b\x42\xf6\xbb\xe3\xfc\xde\xcf\x69\x82\xb0\xdf\xaf\x2d\xcb\x15\xc8\x08\x81\xd8\xd7\x10\x41\xe6\x79\x7d\xd1\xed\xd9\xb2\x2d\x00\x80\xb2\x80\x7e\x05\x9c\x20\xe5\x49\xb0\xe1\xe8\x01\x8f\x09\x78\x1a\x86\xc0\x52\x8a\xb3\x80\xbb\x02\x23\xe4\x04\x5b\x11\x44\x4c\xec\xe0\x3b\xee\x3e\x5d\x1b\xe4\x8d\x92\xad\x2a\xb2\x5a\x03\x05\x11\x26\xc4\xa2\xad\xd9\x1f\x1a\x78\xe8\xb3\x34\x24\x70\x53\x21\x90\x53\x36\xa8\xba\xfa\xcb\xa9\x78\x5e\x6f\x6a\x63\x0e\xe9\xd6\x33\xc3\x2f\x54\x17\xea\xa8\x96\xaa\x3b\x85\x96\x95\xba\x5d\xf0\x07\x13\xee\x37\x26\xec\x2f\xab\x95\x33\xcc\xd7\xa9\x4e\xb2\x51\xba\xcd\x8c\x1b\x53\x1b\x06\xc5\x5e\x1e\xa5\xce\xaf\xad\xfc\x30\x66\x04\x8f\x46\xf5\xf7\xfc\xdc\xe9\xdd\x98\x27\x24\x98\xe9\xe6\xc7\x02\x83\x0d\x37\x9e\xc1\xaf\xdf\x59\x9f\x40\x76\xff\xa9\x3d\x7c\x3a\x20\xd0\x47\x81\xdc\xc5\x64\xc8\x0a\xec\xb2\x70\xac\x3e\xa7\xbb\x29\x02\x13\x12\x81\x4b\xe3\x23\x0f\x43\x1c\x1f\x39\xeb\x69\xfe\x6d\x23\xf5\x59\xe6\x6d\x59\xeb\x27\x0c\x3c\x43\x01\xde\x82\xe1\xb6\x26\xa9\xbc\x45\xc5\x42\xa3\x57\xf1\x58\x6e\xd3\x49\xeb\xa6\x3c\x94\x7a\x6c\xc2\x04\x17\x78\x00\xe6\x5c\x5f\x9a\x5c\xf5\x59\x9a\x0c\x17\x3c\xeb\xe4\xad\x6c\x0e\xaa\xfd\x67\xb9\xac\x8c\x6c\x3c\x4c\xc7\xdc\xec\x79\xde\x6c\xaf\xab\x4a\x19\x4e\x86\x45\xf8\x93\xfe\xc6\xe1\x98\x84\x6c\x7e\x1f\x7b\xb6\xf5\xbf\xd9\x7c\x69\xc0\xb9\x83\xf6\x6c\xeb\x23\x1e\xcf\x9f\x00\x00\x00\xff\xff\x45\xf3\x0b\x96\x46\x05\x00\x00")

func deploymentsRdbmsMigrations01_create_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsRdbmsMigrations01_create_tablesUpSql,
		"deployments/rdbms/migrations/01_create_tables.up.sql",
	)
}

func deploymentsRdbmsMigrations01_create_tablesUpSql() (*asset, error) {
	bytes, err := deploymentsRdbmsMigrations01_create_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/rdbms/migrations/01_create_tables.up.sql", size: 1350, mode: os.FileMode(420), modTime: time.Unix(1557347919, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentsRdbmsSchemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8c\xc1\x6a\x83\x40\x14\x45\xf7\x7e\xc5\x25\x50\x04\xa1\x66\xd3\x45\x21\x9b\x4e\xf4\xa5\x15\x06\x2d\xe3\xeb\xa2\xab\x32\x4f\x5f\x88\x54\x6b\x71\xc6\x42\xfe\xbe\x98\x76\x79\x2f\xe7\x9c\x7d\x96\x20\x03\x5f\x86\x80\xf3\x30\x2a\x86\x80\xce\x8f\xa3\xf6\x90\x2b\x76\xfd\xdc\x7d\xea\x72\xdf\xcd\xd3\xf7\x1c\x34\xbf\x4e\xe3\x0e\x71\x46\xb7\xa8\x8f\x8a\x78\x51\xf4\x3e\x7a\xf1\x41\xf3\x04\xb7\x52\x15\x51\xb5\xa8\x1b\xc6\x1a\xfe\x22\x1b\xe5\xbb\xb8\xfa\x11\x41\x97\x1f\x5d\xc2\xc6\xee\x93\xc2\x91\x61\x42\xe3\xe0\xe8\xd5\x9a\x82\x50\x1a\x36\x47\xd3\x12\x44\x50\xd2\xc9\xbc\x59\x46\xf1\x62\x9c\x29\x98\x1c\x5a\x62\xac\xf1\xfc\x38\xc9\x03\x8a\xc6\xda\x4d\xfe\xdf\x1f\x32\x7c\x1d\x92\x67\x67\x6a\x86\xb1\x16\x4d\x0d\x91\x3c\x03\x37\x48\x45\xd2\xa7\xf4\x2e\x45\x55\x52\xcd\xd5\xa9\xa2\x12\xc7\xf7\xdb\x7d\x48\x7e\x03\x00\x00\xff\xff\xf3\x42\x1b\x54\xfd\x00\x00\x00")

func deploymentsRdbmsSchemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsRdbmsSchemaSql,
		"deployments/rdbms/schema.sql",
	)
}

func deploymentsRdbmsSchemaSql() (*asset, error) {
	bytes, err := deploymentsRdbmsSchemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/rdbms/schema.sql", size: 253, mode: os.FileMode(420), modTime: time.Unix(1555666955, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deployments/rdbms/migrations/01_create_tables.down.sql": deploymentsRdbmsMigrations01_create_tablesDownSql,
	"deployments/rdbms/migrations/01_create_tables.up.sql":   deploymentsRdbmsMigrations01_create_tablesUpSql,
	"deployments/rdbms/schema.sql":                           deploymentsRdbmsSchemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"deployments": &bintree{nil, map[string]*bintree{
		"rdbms": &bintree{nil, map[string]*bintree{
			"migrations": &bintree{nil, map[string]*bintree{
				"01_create_tables.down.sql": &bintree{deploymentsRdbmsMigrations01_create_tablesDownSql, map[string]*bintree{}},
				"01_create_tables.up.sql":   &bintree{deploymentsRdbmsMigrations01_create_tablesUpSql, map[string]*bintree{}},
			}},
			"schema.sql": &bintree{deploymentsRdbmsSchemaSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
