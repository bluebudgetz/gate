// Package assets Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// assets/.DS_Store
// assets/rdbms/init.sql
// deployments/.DS_Store
// deployments/rdbms/.DS_Store
// deployments/rdbms/migrations/01_create_tables.down.sql
// deployments/rdbms/migrations/01_create_tables.up.sql
// deployments/rdbms/schema.sql
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDs_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd8\x3f\x8a\xc2\x40\x1c\xc5\xf1\xf7\x9b\xcd\xc2\xc0\x36\x53\x6e\x39\xcd\x1e\x60\x6f\x30\x84\x78\x02\x2f\x20\x31\x58\x29\x01\x83\x7d\x8e\x2e\x71\x1e\x38\x12\xb4\x13\xa3\xbc\x4f\xf3\x15\x33\x51\xb1\x98\x3f\x01\x60\xf5\xa9\xfb\x07\x02\x00\x8f\x5c\xfc\x61\xce\x00\x7c\xe3\x88\x0e\x2d\x0e\x18\x76\xdd\xb0\x6d\xfb\x7e\x3f\xbd\x0d\x57\x8c\xb1\xcb\x67\xdc\x5e\x17\x11\x11\x91\xe5\xe1\x22\xed\x7f\x5e\xfd\x43\x44\x64\x71\xa6\xf9\x21\xb2\x89\x1d\x73\x8d\xd7\x1d\x5b\x15\xf7\x04\x36\xb2\x89\x1d\x73\x8d\xe3\x1c\x5b\xb1\x9e\x0d\x6c\x64\x13\x3b\xe6\x72\xd2\x32\x1e\x3e\x8c\xdf\x6c\x9e\x0d\x6c\x64\xd3\x73\xfe\x1b\x91\x77\xf7\x95\x13\xa6\xf5\x7f\x75\xe7\xfc\x2f\x22\x9f\xcd\xaa\x66\xdd\xd4\xd7\x03\xc1\x7c\x00\x80\x4d\xf1\xfa\xd1\x26\xc0\xe5\x07\x8a\xbf\xc5\xbd\xda\x08\x88\x2c\xcc\x39\x00\x00\xff\xff\x74\x73\xd3\x5d\x04\x18\x00\x00")

func assetsDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_assetsDs_store,
		"assets/.DS_Store",
	)
}

func assetsDs_store() (*asset, error) {
	bytes, err := assetsDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1555965087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRdbmsInitSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8d\x41\xab\x9b\x40\x14\x85\xf7\xfe\x8a\xc3\xdb\x38\x13\x86\xf7\x88\x7d\xaf\x9b\xae\x6c\xb5\x44\x10\x05\x35\x29\x5d\x85\x1b\xe7\xb6\x0e\x99\x8c\xa2\x93\x40\xfe\x7d\x31\x21\x25\xb4\x5b\xef\xe2\xf2\xdd\x0b\xe7\x3b\x6f\xab\x00\x2b\x34\x9d\x99\xf0\xcb\x58\x86\x99\xd0\x92\xb5\xac\x71\xb8\xe2\xe5\x37\x79\x7e\x81\xef\x41\x5a\xc3\x38\xe3\x0d\x59\x68\xf2\x34\xff\x7c\xc7\x37\x3e\xd0\xc4\xaf\x01\x6e\xa2\xcc\x23\xab\x51\x16\xf9\x4f\x18\x77\xe9\x8f\x3c\xc7\xa0\xf9\xc2\xb6\x1f\x4e\xec\x3c\xd8\x5d\xcc\xd8\xbb\x99\xe7\xd0\x5b\x90\x15\x75\x5a\x35\xc8\x8a\xa6\x04\xb5\x6d\x7f\x76\x7e\x82\x30\x5a\xa1\x1d\x99\x3c\xeb\x7d\xef\x14\xce\x83\xfe\xcb\x9a\x2d\x3f\xd8\xd1\x89\x15\x06\x1a\xd9\xf9\xbd\xd1\x32\xd8\xc5\xf9\x36\xad\x21\xd6\x0a\x49\xdc\xa4\xfb\x38\x49\xc4\x0c\xa2\x28\x7f\x08\x29\xd5\x5c\x94\x56\xbb\x38\xc7\xf7\xbc\x2c\x2b\x51\xc5\x45\x22\x24\x56\x88\xde\x25\x36\xe5\xb6\x92\x0a\xc5\x36\xcf\x1f\x3b\xfc\x4a\xee\xb8\x0e\xef\xa7\x54\x01\xee\x23\xa2\x25\xfd\xd1\xff\xfe\x4f\x4b\xf9\xf3\x9e\xdc\x14\x2a\xac\x9f\xe4\xef\x4b\xc9\x6b\xb2\x34\x5e\xff\xb1\x7f\x2c\x65\xcf\xdc\x74\x1e\xc9\xb5\x1c\x2a\x44\x4f\x05\x9f\x97\x2a\xf8\xd6\x31\x0d\xb1\xd3\x1b\x26\xeb\xbb\x2b\x32\xd7\xbe\x86\x0a\x1f\xf2\x4b\xf0\x27\x00\x00\xff\xff\xc2\x67\x4d\x35\x19\x03\x00\x00")

func assetsRdbmsInitSqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRdbmsInitSql,
		"assets/rdbms/init.sql",
	)
}

func assetsRdbmsInitSql() (*asset, error) {
	bytes, err := assetsRdbmsInitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/rdbms/init.sql", size: 793, mode: os.FileMode(420), modTime: time.Unix(1555675806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentsDs_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd8\x3f\x8a\xc2\x40\x1c\xc5\xf1\xf7\x9b\xcd\xc2\xc0\x36\x53\x6e\x39\xcd\x1e\x60\x6f\x30\x84\x78\x02\x2f\x20\x31\x58\x29\x01\x83\x7d\x8e\x2e\x71\x1e\x38\x12\xb4\x13\xa3\xbc\x4f\xf3\x15\x33\x51\xb1\x98\x3f\x01\x60\xf5\xa9\xfb\x07\x02\x00\x8f\x5c\xfc\x61\xce\x00\x7c\xe3\x88\x0e\x2d\x0e\x18\x76\xdd\xb0\x6d\xfb\x7e\x3f\xbd\x0d\x57\x8c\xb1\xcb\x67\xdc\x5e\x17\x11\x11\x91\xe5\xe1\x22\xed\x7f\x5e\xfd\x43\x44\x64\x71\xa6\xf9\x21\xb2\x89\x1d\x73\x8d\xd7\x1d\x5b\x15\xf7\x04\x36\xb2\x89\x1d\x73\x8d\xe3\x1c\x5b\xb1\x9e\x0d\x6c\x64\x13\x3b\xe6\x72\xd2\x32\x1e\x3e\x8c\xdf\x6c\x9e\x0d\x6c\x64\xd3\x73\xfe\x1b\x91\x77\xf7\x95\x13\xa6\xf5\x7f\x75\xe7\xfc\x2f\x22\x9f\xcd\xaa\x66\xdd\xd4\xd7\x03\xc1\x7c\x00\x80\x4d\xf1\xfa\xd1\x26\xc0\xe5\x07\x8a\xbf\xc5\xbd\xda\x08\x88\x2c\xcc\x39\x00\x00\xff\xff\x74\x73\xd3\x5d\x04\x18\x00\x00")

func deploymentsDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsDs_store,
		"deployments/.DS_Store",
	)
}

func deploymentsDs_store() (*asset, error) {
	bytes, err := deploymentsDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1555965087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentsRdbmsDs_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x4d\x6a\x84\x40\x10\x85\x5f\x75\x5c\x34\xc9\xa6\x97\x59\xf6\x15\x72\x83\x46\xcc\x09\x72\x81\xfc\x48\x82\x90\x44\x88\xc9\xde\x55\xce\x95\xa3\x05\xe9\x37\x28\xa8\xe0\x66\x18\x67\x78\x1f\x34\xdf\xc2\xaa\x56\x5c\x74\x55\x35\x00\x2b\x7f\xea\x3b\x20\x00\xf0\xc8\xc6\x2f\x16\xf1\x5c\x33\x1c\x6d\x79\x05\xe0\x09\xdf\x68\xd0\xe2\x13\xdd\xf2\x5e\x33\x86\xdc\x6b\x7c\xa0\xc1\x1b\xbe\xa6\xf9\xaf\x75\xf7\xf2\xdc\xb6\xef\xb6\x71\x23\x21\x84\x10\x42\x6c\x82\xa5\xd5\xdf\x9c\xfa\x43\x84\x10\xbb\x63\x38\x1f\x22\x9d\xe8\x3e\xdb\xf8\xdc\xd1\xc5\x24\x27\xd0\x91\x4e\x74\x9f\x6d\x8c\x73\x74\x41\x7b\x3a\xd0\x91\x4e\x74\x9f\xcd\x43\xcb\x38\x7c\x18\xdf\x6c\x9c\x50\x2c\xd0\x91\x4e\xc7\xf9\x37\x42\x9c\x3b\x57\x59\x61\xa8\xff\xf7\xeb\xf3\xbf\x10\xe2\x82\xb1\xa2\x7a\xa8\xca\x71\x20\x98\xe1\xd8\x08\x3c\x32\xe6\xef\x90\xb8\xd2\x08\xb8\x7c\x61\x78\x8b\x31\x4e\xcd\x80\x10\x3b\xe2\x3f\x00\x00\xff\xff\x5f\x91\x28\x05\x04\x18\x00\x00")

func deploymentsRdbmsDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsRdbmsDs_store,
		"deployments/rdbms/.DS_Store",
	)
}

func deploymentsRdbmsDs_store() (*asset, error) {
	bytes, err := deploymentsRdbmsDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/rdbms/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1555965087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentsRdbmsMigrations01_create_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x29\x4a\xcc\x2b\x4e\x4c\x2e\xc9\xcc\xcf\x2b\xb6\xe6\xc2\xaa\x24\x31\x39\x39\xbf\x34\xaf\xa4\xd8\x9a\x0b\x10\x00\x00\xff\xff\xa4\x3c\x65\xad\x42\x00\x00\x00")

func deploymentsRdbmsMigrations01_create_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsRdbmsMigrations01_create_tablesDownSql,
		"deployments/rdbms/migrations/01_create_tables.down.sql",
	)
}

func deploymentsRdbmsMigrations01_create_tablesDownSql() (*asset, error) {
	bytes, err := deploymentsRdbmsMigrations01_create_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/rdbms/migrations/01_create_tables.down.sql", size: 66, mode: os.FileMode(420), modTime: time.Unix(1555667022, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentsRdbmsMigrations01_create_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x41\x6f\xa3\x30\x10\x85\xef\xfc\x8a\x39\x82\xb4\xa7\x95\x72\xca\xc9\x0b\x43\x16\x2d\x98\x68\x30\x2b\xe5\x84\x1c\x70\x23\xd4\xc6\x44\xc4\xf9\xff\x95\x4b\x20\x50\x88\x9a\x56\x2d\x27\xe4\x79\x33\x7a\xf3\xbd\xc9\x33\x84\xfd\x7e\xed\x38\x3e\x21\x13\x08\x82\xfd\x89\x11\x64\x59\x36\x17\x6d\xce\x8e\xeb\x00\x00\xd4\x15\xf4\x5f\xc4\x05\xe4\x3c\x8b\x36\x1c\x03\xe0\xa9\x00\x9e\xc7\x31\xb0\x5c\xa4\x45\xc4\x7d\xc2\x04\xb9\x80\x2d\x45\x09\xa3\x1d\xfc\xc3\xdd\xaf\xb7\x01\x65\xab\xa4\x51\x55\xd1\x68\x10\x51\x82\x99\x60\xc9\xd6\xbe\x0f\x03\x02\x0c\x59\x1e\x0b\xf0\x73\x22\xe4\xa2\x18\x54\x5d\xff\xe5\x54\x2d\xf7\xdb\xde\x94\x43\xbe\x0d\xac\xf9\x3b\xdd\x95\x7a\x51\xf7\xba\x3b\x85\x96\x47\x75\x5d\xf0\x3f\x23\xff\x2f\x23\xf7\xf7\x6a\xe5\x0d\xfe\x3a\xd5\x49\xb6\x4a\x9b\xc2\xd2\x98\x62\x18\x14\x7e\xca\x33\x41\xcc\x56\xc3\x94\x30\xda\x70\xcb\x00\x9e\x9e\x8b\x9e\x68\x71\x1b\xe2\x0e\xbf\x1e\x10\x86\x48\xc8\x7d\xcc\x06\xf6\xe0\xd6\x95\xe7\xf4\xdc\x6f\x4b\x12\x66\x82\x22\x5f\x8c\x4b\x01\xc6\x38\x2e\x79\xeb\x69\x9e\xa6\x95\xfa\x2c\x4b\x53\x37\x7a\x21\xd3\xa5\x68\xe1\x4b\xe1\x5e\xbf\x09\xe5\xc7\x53\x6e\xda\xfa\x50\xeb\xb1\xa5\x49\x18\xf0\x2e\x8e\x73\x73\x69\x4b\xd5\x93\xb5\x44\xef\x6c\xd0\xc9\x8d\x6c\x0f\xca\x3c\x2c\x97\x47\x2b\x1b\x9b\x09\xe3\x94\x2d\x1c\xff\x47\xc9\x8f\xd9\x17\x73\xcf\xee\xec\xe9\xbb\xaf\xe1\x53\x06\xe7\x94\xdc\xd9\xd3\x4f\x9c\xeb\x6b\x00\x00\x00\xff\xff\xe0\x09\x96\x1c\x88\x04\x00\x00")

func deploymentsRdbmsMigrations01_create_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsRdbmsMigrations01_create_tablesUpSql,
		"deployments/rdbms/migrations/01_create_tables.up.sql",
	)
}

func deploymentsRdbmsMigrations01_create_tablesUpSql() (*asset, error) {
	bytes, err := deploymentsRdbmsMigrations01_create_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/rdbms/migrations/01_create_tables.up.sql", size: 1160, mode: os.FileMode(420), modTime: time.Unix(1555965178, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentsRdbmsSchemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8c\xc1\x6a\x83\x40\x14\x45\xf7\x7e\xc5\x25\x50\x04\xa1\x66\xd3\x45\x21\x9b\x4e\xf4\xa5\x15\x06\x2d\xe3\xeb\xa2\xab\x32\x4f\x5f\x88\x54\x6b\x71\xc6\x42\xfe\xbe\x98\x76\x79\x2f\xe7\x9c\x7d\x96\x20\x03\x5f\x86\x80\xf3\x30\x2a\x86\x80\xce\x8f\xa3\xf6\x90\x2b\x76\xfd\xdc\x7d\xea\x72\xdf\xcd\xd3\xf7\x1c\x34\xbf\x4e\xe3\x0e\x71\x46\xb7\xa8\x8f\x8a\x78\x51\xf4\x3e\x7a\xf1\x41\xf3\x04\xb7\x52\x15\x51\xb5\xa8\x1b\xc6\x1a\xfe\x22\x1b\xe5\xbb\xb8\xfa\x11\x41\x97\x1f\x5d\xc2\xc6\xee\x93\xc2\x91\x61\x42\xe3\xe0\xe8\xd5\x9a\x82\x50\x1a\x36\x47\xd3\x12\x44\x50\xd2\xc9\xbc\x59\x46\xf1\x62\x9c\x29\x98\x1c\x5a\x62\xac\xf1\xfc\x38\xc9\x03\x8a\xc6\xda\x4d\xfe\xdf\x1f\x32\x7c\x1d\x92\x67\x67\x6a\x86\xb1\x16\x4d\x0d\x91\x3c\x03\x37\x48\x45\xd2\xa7\xf4\x2e\x45\x55\x52\xcd\xd5\xa9\xa2\x12\xc7\xf7\xdb\x7d\x48\x7e\x03\x00\x00\xff\xff\xf3\x42\x1b\x54\xfd\x00\x00\x00")

func deploymentsRdbmsSchemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsRdbmsSchemaSql,
		"deployments/rdbms/schema.sql",
	)
}

func deploymentsRdbmsSchemaSql() (*asset, error) {
	bytes, err := deploymentsRdbmsSchemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/rdbms/schema.sql", size: 253, mode: os.FileMode(420), modTime: time.Unix(1555666955, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/.DS_Store":                                       assetsDs_store,
	"assets/rdbms/init.sql":                                  assetsRdbmsInitSql,
	"deployments/.DS_Store":                                  deploymentsDs_store,
	"deployments/rdbms/.DS_Store":                            deploymentsRdbmsDs_store,
	"deployments/rdbms/migrations/01_create_tables.down.sql": deploymentsRdbmsMigrations01_create_tablesDownSql,
	"deployments/rdbms/migrations/01_create_tables.up.sql":   deploymentsRdbmsMigrations01_create_tablesUpSql,
	"deployments/rdbms/schema.sql":                           deploymentsRdbmsSchemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{assetsDs_store, map[string]*bintree{}},
		"rdbms": &bintree{nil, map[string]*bintree{
			"init.sql": &bintree{assetsRdbmsInitSql, map[string]*bintree{}},
		}},
	}},
	"deployments": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{deploymentsDs_store, map[string]*bintree{}},
		"rdbms": &bintree{nil, map[string]*bintree{
			".DS_Store": &bintree{deploymentsRdbmsDs_store, map[string]*bintree{}},
			"migrations": &bintree{nil, map[string]*bintree{
				"01_create_tables.down.sql": &bintree{deploymentsRdbmsMigrations01_create_tablesDownSql, map[string]*bintree{}},
				"01_create_tables.up.sql":   &bintree{deploymentsRdbmsMigrations01_create_tablesUpSql, map[string]*bintree{}},
			}},
			"schema.sql": &bintree{deploymentsRdbmsSchemaSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
