// Package assets Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// deployments/rdbms/migrations/01_create_tables.down.sql
// deployments/rdbms/migrations/01_create_tables.up.sql
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deploymentsRdbmsMigrations01_create_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x76\xf6\x70\xf5\x75\x54\x48\x4a\x52\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\x02\x8b\x87\x06\xbb\x06\x29\x24\x25\x59\x73\x01\x02\x00\x00\xff\xff\x09\x0f\x85\xa0\x26\x00\x00\x00")

func deploymentsRdbmsMigrations01_create_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsRdbmsMigrations01_create_tablesDownSql,
		"deployments/rdbms/migrations/01_create_tables.down.sql",
	)
}

func deploymentsRdbmsMigrations01_create_tablesDownSql() (*asset, error) {
	bytes, err := deploymentsRdbmsMigrations01_create_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/rdbms/migrations/01_create_tables.down.sql", size: 38, mode: os.FileMode(420), modTime: time.Unix(1557561707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentsRdbmsMigrations01_create_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x3c\x04\x01\xd6\x06\x92\xa0\x5d\x60\x4f\x41\x0f\x8c\x3c\x8e\x85\xda\x92\x41\x51\xcd\x66\x2f\x06\x2d\x73\x65\xa2\x12\xe5\x8a\xf4\x06\xfb\xef\x0b\x7d\x5a\x41\x3e\x1a\x34\x01\x56\x37\x0d\x39\x8f\xf3\xde\xcc\x9b\xcb\x4b\x24\x56\x55\x16\xb2\x52\xc8\xf2\x72\x2b\x73\xb8\x12\x6e\xaf\xa0\x8c\xd3\x95\xc2\x4e\x3a\xb9\x95\x56\x79\x3e\x27\x26\x08\x49\x4c\x1c\xdb\xed\xb5\xe7\x5d\x5e\xe2\x4e\x61\x2f\x7f\x28\x94\x46\xc1\xa6\x7b\x55\x48\xa4\xa5\x71\x52\x1b\x6d\x32\xa8\x1f\xaa\xfa\xe9\xf6\xda\x64\x7d\x72\xec\x2f\x68\xc5\xb0\xdd\x82\x25\x62\x11\xf1\xe0\x1b\x13\x41\x14\x0e\x78\x62\xaf\x2d\xbe\x1f\x4d\xea\x74\x69\xa0\x2d\x52\x99\xe7\x6a\x87\x87\xbd\x32\x35\x1a\x24\xaa\xf2\xa1\x3e\x38\x1e\x76\xd2\xa9\x1d\xb4\x81\x84\x93\xdb\x5c\xe1\x41\xbb\x3d\xa4\xc1\x59\x77\xb6\x29\xcd\x19\xd2\x32\x3f\x16\xe6\x02\xd2\xec\x60\x75\x71\xc8\x7f\xe2\x90\xcb\x54\xd9\x9a\x63\xfd\x64\x7a\xac\x2a\x65\x1c\x9c\x2e\x94\x75\xb2\x38\xd4\x90\x35\xff\x67\x60\xae\x7a\x1e\x11\x07\xa7\xf5\x92\xf9\x84\x79\x12\xfa\x1d\x87\xab\x36\x63\x73\x4a\xdc\xb4\x79\x93\xa9\x07\x00\x9c\x44\xc2\xc3\x18\x82\x07\xb7\xb7\xc4\xc1\x62\xef\xfc\xdc\xbb\xa1\xdb\x20\x6c\xce\x43\xba\xbb\x3a\xe5\xe2\x0f\x98\xf2\x61\x32\xbd\x1e\xe5\xd6\x57\xae\x3d\x0a\x67\xde\xf9\x39\x72\x69\xb2\xa3\xcc\x14\x3e\x1d\xf2\x43\x66\xff\xc9\x3f\x75\x22\x56\x4a\x75\x92\x8c\x9a\x21\xf3\x1c\x32\x4d\xcb\xa3\x71\xf6\x0a\x24\xd3\x7d\xff\x8b\x43\xa9\x8d\xb3\x75\xdf\xb5\xb3\x38\xc8\x46\x8f\xee\x70\xa0\x2c\xd8\xcd\x92\x6a\x92\x3d\x88\x37\x69\x0a\xd3\x3b\x9c\xbe\x20\x14\x54\x33\x7b\xf2\x85\x91\x40\x98\x2c\x97\x5e\x1f\xb8\xa5\x90\x38\x13\x34\xc3\xcd\x3d\x66\x34\x67\xc9\x52\x80\xc5\x08\x66\x14\x8a\x40\xdc\x0f\x17\xd7\x3c\x58\x31\x7e\x8f\x3f\xe9\xfe\xa2\x09\xa6\x95\xea\x15\x02\x44\xb0\xa2\x58\xb0\xd5\x1a\x77\x81\x58\x34\xbf\xf8\x16\x85\x34\x3c\x38\x60\x77\x7d\xde\x0c\x7d\x6e\xd1\x46\x7a\xbf\x86\x96\x2c\x97\xed\x7d\x23\x0b\x35\xb0\xfa\x8b\x71\x7f\xc1\xf8\xe4\xf3\x97\x2f\xd3\x67\xe9\xb6\x39\xad\xa2\x9b\x56\xa9\x97\x25\x1a\xcb\xe3\x47\x61\x2c\x38\x0b\x42\x81\xef\x7f\x6f\x7a\xc9\x37\x27\x24\x4e\x73\xe2\x14\xfa\x14\x8f\x7b\x82\x89\xde\x4d\x11\x85\x98\xd1\x92\x04\x81\x53\x2c\x78\xe0\x8b\x3a\x94\xac\x67\x6c\x14\xf2\xa6\xfd\xb4\xe8\x2c\x53\x55\xdd\xfd\x56\x8b\x97\x86\x7f\xf0\x45\xff\xd8\x59\xef\xbb\x97\xcc\x79\x9a\x9d\x6e\xe0\x3b\x7f\x0c\x74\x4e\x8f\x34\xc4\x6f\x68\x1e\x71\xea\x0a\x6d\x22\xad\xad\x86\x89\xab\x43\xf3\x88\x83\x98\xbf\x00\x8f\xee\x3c\xfa\x4a\x7e\x22\x08\x6b\x1e\xf9\x34\x4b\x38\xbd\xee\xc2\x8e\xf1\x73\xd6\x70\x95\x34\x56\x36\x7b\xc7\x36\x8b\x0b\x85\xdc\xa9\xa7\xd3\x3f\xbe\xf7\x9c\x03\x7e\x8d\x0d\x9a\xef\x63\xbd\xf0\x1f\x90\xc3\x70\x97\x95\xce\xb4\x19\x93\x7c\xa3\x2b\x6c\x79\xac\xd2\x61\x18\xea\x99\x7e\xbb\x6c\x8f\xed\x31\xee\xc9\xe6\x29\xec\xbb\xad\xd2\xd6\xeb\x64\x95\x29\xf7\xe1\xf5\x3e\x85\xfd\xa0\x7a\x65\xd1\x2c\xf7\x71\x59\xc9\x8a\x78\xe0\x4f\x7e\xff\xed\x02\x9f\xa7\x2f\x36\x26\x2d\x8b\x42\xd5\x2f\x0e\x9f\xa0\xaf\xef\xd8\x17\x63\xba\xff\x7b\x67\x3c\xd2\xec\x8d\x7b\xe3\x91\x57\xf1\xee\xdd\xf1\x6f\x00\x00\x00\xff\xff\x56\xa5\x39\x53\x2c\x09\x00\x00")

func deploymentsRdbmsMigrations01_create_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsRdbmsMigrations01_create_tablesUpSql,
		"deployments/rdbms/migrations/01_create_tables.up.sql",
	)
}

func deploymentsRdbmsMigrations01_create_tablesUpSql() (*asset, error) {
	bytes, err := deploymentsRdbmsMigrations01_create_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/rdbms/migrations/01_create_tables.up.sql", size: 2348, mode: os.FileMode(420), modTime: time.Unix(1557583846, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deployments/rdbms/migrations/01_create_tables.down.sql": deploymentsRdbmsMigrations01_create_tablesDownSql,
	"deployments/rdbms/migrations/01_create_tables.up.sql":   deploymentsRdbmsMigrations01_create_tablesUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"deployments": &bintree{nil, map[string]*bintree{
		"rdbms": &bintree{nil, map[string]*bintree{
			"migrations": &bintree{nil, map[string]*bintree{
				"01_create_tables.down.sql": &bintree{deploymentsRdbmsMigrations01_create_tablesDownSql, map[string]*bintree{}},
				"01_create_tables.up.sql":   &bintree{deploymentsRdbmsMigrations01_create_tablesUpSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
