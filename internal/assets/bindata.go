// Package assets Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// assets/rdbms/init.sql
// deployments/rdbms/migrations/01_create_tables.down.sql
// deployments/rdbms/migrations/01_create_tables.up.sql
// deployments/rdbms/schema.sql
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsRdbmsInitSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x5f\x6b\xdb\x30\x14\xc5\xdf\xfd\x29\x0e\x7d\xb1\x5d\x44\x5a\xe7\x5f\x19\x7d\xf2\x96\x8c\x1a\x8c\x3d\xf2\xa7\x63\x4f\xe1\xc6\xba\x4d\x44\x1d\x29\xc8\x72\x20\xdf\x7e\x28\x59\x3b\xaf\x7b\x1b\x9e\x1f\xcc\xd1\x85\xfb\x3b\xe8\x88\x73\x77\x1b\xe0\x16\xab\xbd\x6a\xf0\xa2\x6a\x86\x6a\x50\x51\x5d\xb3\xc4\xf6\x8c\x9b\x1d\x39\xbe\x81\x33\x20\x29\xa1\xb4\x72\x8a\x6a\x48\x72\xe4\x67\x6e\xcf\x17\xbd\xa5\x86\x07\x01\x2e\xa0\xcc\x21\x5b\xa2\x2c\xf2\x1f\x50\xfa\x64\x5e\xd9\xaf\x41\xf2\x89\x6b\x73\x3c\xb0\x76\x60\x7d\x52\xd6\x68\xaf\xfd\xd2\x5d\x90\x15\xcb\xf9\x62\x85\xac\x58\x95\xd8\x6e\x07\x54\x55\xa6\xd5\xae\x41\xa4\xa4\x40\x65\x99\x1c\xcb\x8d\xd1\x02\xed\x51\xbe\x6b\xc9\x35\xbf\x69\x4d\x07\x16\x38\x92\x65\xed\x36\x4a\xc6\xc1\x73\x9a\xaf\xe7\x4b\x44\x89\xc0\x2c\x5d\xcd\x37\xe9\x6c\x16\x79\x11\x15\xe5\xf7\x28\x8e\x85\xf7\x9a\x2f\x9e\xd3\x1c\x5f\xf3\xb2\x5c\x44\x8b\xb4\x98\x45\x31\x6e\x31\x1c\xc7\x78\x2a\xd7\x8b\x58\xa0\x58\xe7\xf9\xdb\x3f\xfc\x4c\xfa\x35\x09\xaf\xc7\x58\x04\xb8\x7e\xd1\xb0\x4f\xfe\xf0\x6f\xfe\xa8\x2f\x7e\x6e\x48\x37\xa1\x40\xd2\x81\x8f\xfb\x82\x2f\xa9\x26\x7b\xfe\x40\x9f\xf4\x45\xcf\x74\xd3\x5a\xd2\x15\x87\x02\xc3\x8e\xc1\xb4\x2f\x83\x2f\x7b\xa6\x63\xaa\xe5\x13\x53\xed\xf6\x67\x64\xba\x1a\x84\x02\x93\x8e\xd7\x43\x7f\x51\xbd\xf0\xd2\xd9\xb6\x72\xc8\x9d\xbc\xda\x3c\x06\x1f\x1b\xe0\x2c\xe9\x86\x2a\xa7\x8c\x6e\x10\x75\x1b\x60\xac\xda\x29\x2d\xd0\x98\xd6\x56\xbc\xf9\x55\x95\x8d\x2f\x8a\x23\xbb\x63\xf7\xc7\x88\x0e\x5e\x0a\x54\xe6\xe0\xdb\xd6\xfc\x2e\xc6\x3f\xdf\x26\xcc\xb4\x72\xa1\xc0\x58\x60\x2a\x90\xdc\xdf\x0b\x84\xd7\xe0\xa0\xde\x1f\xaa\x93\x5c\x1f\x46\x0f\x02\xa3\x89\x0f\xef\x12\x5c\x6b\xf9\xff\x59\x8d\x04\x92\xe1\xf4\x93\x40\xf8\x8d\xce\xa8\x0d\x69\x24\x61\xfc\x18\xfc\x0c\x00\x00\xff\xff\xc4\x0b\xce\xc6\x25\x05\x00\x00")

func assetsRdbmsInitSqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRdbmsInitSql,
		"assets/rdbms/init.sql",
	)
}

func assetsRdbmsInitSql() (*asset, error) {
	bytes, err := assetsRdbmsInitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/rdbms/init.sql", size: 1317, mode: os.FileMode(420), modTime: time.Unix(1557076824, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentsRdbmsMigrations01_create_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x29\x4a\xcc\x2b\x4e\x4c\x2e\xc9\xcc\xcf\x2b\xb6\xe6\xc2\xaa\x24\x31\x39\x39\xbf\x34\xaf\xa4\xd8\x9a\x0b\x10\x00\x00\xff\xff\xa4\x3c\x65\xad\x42\x00\x00\x00")

func deploymentsRdbmsMigrations01_create_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsRdbmsMigrations01_create_tablesDownSql,
		"deployments/rdbms/migrations/01_create_tables.down.sql",
	)
}

func deploymentsRdbmsMigrations01_create_tablesDownSql() (*asset, error) {
	bytes, err := deploymentsRdbmsMigrations01_create_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/rdbms/migrations/01_create_tables.down.sql", size: 66, mode: os.FileMode(420), modTime: time.Unix(1555667022, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentsRdbmsMigrations01_create_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x41\x6f\xab\x30\x0c\xc7\xef\x7c\x0a\x1f\x41\x7a\xa7\x27\xf5\xd4\x53\x1e\x98\x3e\x34\x08\x55\x30\xd3\x7a\x42\x29\x64\x15\xda\x80\x8a\xd2\xef\x3f\x65\x94\x14\x06\xd5\xba\x69\xcb\x29\xb2\xff\xb6\xec\xdf\xdf\x69\x82\xb0\xdf\xaf\x2d\xcb\x15\xc8\x08\x81\xd8\xbf\x10\x41\xe6\x79\x73\xae\xbb\x93\x65\x5b\x00\x00\x65\x01\xc3\x0b\x38\x41\xca\x93\x60\xc3\xd1\x03\x1e\x13\xf0\x34\x0c\x81\xa5\x14\x67\x01\x77\x05\x46\xc8\x09\xb6\x22\x88\x98\xd8\xc1\x03\xee\xfe\xbc\x37\xc8\x5b\x25\x3b\x55\x64\x4d\x0d\x14\x44\x98\x10\x8b\xb6\x3a\x6e\x1a\x78\xe8\xb3\x34\x24\x70\x53\x21\x90\x53\x66\x54\x7d\xfd\xf9\x58\x2c\xd7\xeb\xda\x98\x43\xba\xf5\xf4\xf0\x37\xaa\x0b\xf5\xaa\x6e\x55\xf7\x8a\x5a\x56\xea\xb2\xe0\x23\x13\xee\x7f\x26\xec\xbf\xab\x95\x63\xe6\xeb\x55\x47\xd9\xaa\xba\xcb\x34\x8d\x29\x06\xa3\x70\x63\x9e\x90\x60\x3a\xeb\xc7\x02\x83\x0d\xd7\x0c\xe0\xf9\x25\x1b\x88\x66\xd7\x26\xb6\xf9\x3a\x20\xd0\x47\x81\xdc\xc5\xc4\xb0\x07\xbb\x2c\x1c\x6b\xe0\x7e\x5d\x52\x60\x42\x22\x70\x69\x9c\xf2\x30\xc4\x71\xca\x59\x4f\xfd\xec\x5a\x59\x9f\x64\xde\x95\x4d\xbd\xe0\xe9\x92\xb5\xf0\x2d\x73\x2f\x6f\x42\xf9\x7e\x97\x9b\xb6\x3c\x94\xf5\x78\xa4\x89\x19\xf0\xc1\x8e\x53\x73\x6e\x73\x35\x90\xd5\x44\x6f\x6c\xd0\xcb\x3b\xd9\x1e\x54\x77\xb7\x5c\x56\x5a\x36\x1e\xc6\x0f\x63\xb6\x70\xfc\x17\x08\x4d\x55\x29\xed\x9a\x79\x84\x4f\xf4\xd9\x55\x8c\x7d\xc9\xe6\xfb\xd8\xb3\xd0\x4f\x5f\xca\x97\x06\x9c\x13\xb4\x67\xa1\xdf\x38\xe5\xb7\x00\x00\x00\xff\xff\xf3\x6d\xcf\x4a\xa4\x04\x00\x00")

func deploymentsRdbmsMigrations01_create_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsRdbmsMigrations01_create_tablesUpSql,
		"deployments/rdbms/migrations/01_create_tables.up.sql",
	)
}

func deploymentsRdbmsMigrations01_create_tablesUpSql() (*asset, error) {
	bytes, err := deploymentsRdbmsMigrations01_create_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/rdbms/migrations/01_create_tables.up.sql", size: 1188, mode: os.FileMode(420), modTime: time.Unix(1557075341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentsRdbmsSchemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8c\xc1\x6a\x83\x40\x14\x45\xf7\x7e\xc5\x25\x50\x04\xa1\x66\xd3\x45\x21\x9b\x4e\xf4\xa5\x15\x06\x2d\xe3\xeb\xa2\xab\x32\x4f\x5f\x88\x54\x6b\x71\xc6\x42\xfe\xbe\x98\x76\x79\x2f\xe7\x9c\x7d\x96\x20\x03\x5f\x86\x80\xf3\x30\x2a\x86\x80\xce\x8f\xa3\xf6\x90\x2b\x76\xfd\xdc\x7d\xea\x72\xdf\xcd\xd3\xf7\x1c\x34\xbf\x4e\xe3\x0e\x71\x46\xb7\xa8\x8f\x8a\x78\x51\xf4\x3e\x7a\xf1\x41\xf3\x04\xb7\x52\x15\x51\xb5\xa8\x1b\xc6\x1a\xfe\x22\x1b\xe5\xbb\xb8\xfa\x11\x41\x97\x1f\x5d\xc2\xc6\xee\x93\xc2\x91\x61\x42\xe3\xe0\xe8\xd5\x9a\x82\x50\x1a\x36\x47\xd3\x12\x44\x50\xd2\xc9\xbc\x59\x46\xf1\x62\x9c\x29\x98\x1c\x5a\x62\xac\xf1\xfc\x38\xc9\x03\x8a\xc6\xda\x4d\xfe\xdf\x1f\x32\x7c\x1d\x92\x67\x67\x6a\x86\xb1\x16\x4d\x0d\x91\x3c\x03\x37\x48\x45\xd2\xa7\xf4\x2e\x45\x55\x52\xcd\xd5\xa9\xa2\x12\xc7\xf7\xdb\x7d\x48\x7e\x03\x00\x00\xff\xff\xf3\x42\x1b\x54\xfd\x00\x00\x00")

func deploymentsRdbmsSchemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentsRdbmsSchemaSql,
		"deployments/rdbms/schema.sql",
	)
}

func deploymentsRdbmsSchemaSql() (*asset, error) {
	bytes, err := deploymentsRdbmsSchemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployments/rdbms/schema.sql", size: 253, mode: os.FileMode(420), modTime: time.Unix(1555666955, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/rdbms/init.sql":                                  assetsRdbmsInitSql,
	"deployments/rdbms/migrations/01_create_tables.down.sql": deploymentsRdbmsMigrations01_create_tablesDownSql,
	"deployments/rdbms/migrations/01_create_tables.up.sql":   deploymentsRdbmsMigrations01_create_tablesUpSql,
	"deployments/rdbms/schema.sql":                           deploymentsRdbmsSchemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"rdbms": &bintree{nil, map[string]*bintree{
			"init.sql": &bintree{assetsRdbmsInitSql, map[string]*bintree{}},
		}},
	}},
	"deployments": &bintree{nil, map[string]*bintree{
		"rdbms": &bintree{nil, map[string]*bintree{
			"migrations": &bintree{nil, map[string]*bintree{
				"01_create_tables.down.sql": &bintree{deploymentsRdbmsMigrations01_create_tablesDownSql, map[string]*bintree{}},
				"01_create_tables.up.sql":   &bintree{deploymentsRdbmsMigrations01_create_tablesUpSql, map[string]*bintree{}},
			}},
			"schema.sql": &bintree{deploymentsRdbmsSchemaSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
