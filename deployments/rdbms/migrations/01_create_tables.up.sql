-- Users are global to the entire database
CREATE USER bb;

-- We have one schema containing everything
CREATE SCHEMA bb AUTHORIZATION bb;

-- This function is called whenever a row is updated in a table with an "updated_on" column, and simply places the
-- current timestamp in the "updated_on" column.
CREATE OR REPLACE FUNCTION bb.update_updated_on_column()
    RETURNS TRIGGER AS
$$
BEGIN
    NEW.updated_on = now();
    RETURN NEW;
END
$$ language 'plpgsql';

-- Tree table containing all accounts. Each account points to its parent account.
CREATE TABLE bb.accounts
(
    id           INTEGER                  NOT NULL
        GENERATED BY DEFAULT AS IDENTITY
        PRIMARY KEY,
    created_on   TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT current_timestamp,
    updated_on   TIMESTAMP WITH TIME ZONE NULL,
    name         VARCHAR(255)             NOT NULL,
    parent_id    INTEGER                  NULL
        CONSTRAINT fk_accounts_parent_id REFERENCES bb.accounts (id) ON DELETE RESTRICT ON UPDATE RESTRICT
);

-- Trigger to update the "updated_on" column in the "accounts" table whenever a row is updated.
CREATE TRIGGER update_accounts_updated_on
    BEFORE UPDATE
    ON bb.accounts
    FOR EACH ROW
EXECUTE PROCEDURE bb.update_updated_on_column();

-- Table containing all transactions ever made.
CREATE TABLE bb.transactions
(
    id                INTEGER                  NOT NULL
        GENERATED BY DEFAULT AS IDENTITY
        PRIMARY KEY,
    created_on        TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT current_timestamp,
    updated_on        TIMESTAMP WITH TIME ZONE NULL,
    origin            VARCHAR(255)             NOT NULL,
    source_account_id INTEGER                  NOT NULL
        CONSTRAINT fk_transactions_source_account_id REFERENCES bb.accounts (id) ON DELETE RESTRICT ON UPDATE RESTRICT,
    target_account_id INTEGER                  NOT NULL
        CONSTRAINT fk_transactions_target_account_id REFERENCES bb.accounts (id) ON DELETE RESTRICT ON UPDATE RESTRICT,
    amount            NUMERIC(10, 2)           NOT NULL,
    comments          TEXT
);

-- Trigger to update the "updated_on" column in the "transactions" table whenever a row is updated.
CREATE TRIGGER update_transactions_updated_on
    BEFORE UPDATE
    ON bb.transactions
    FOR EACH ROW
EXECUTE PROCEDURE bb.update_updated_on_column();
